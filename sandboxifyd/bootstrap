#!/usr/bin/perl

use strict;
use warnings;

use constant CPANEL_WHM_URL    => 'ssh://git@{host}:7999/cpanel/cpanel-whm.git';
use constant SANDBOX_TOOLS_URL => 'ssh://git@{host}:7999/dev-tools/sandbox-utils.git';

my $major_version = get_major_version();

if ( !$ENV{'GIT_HOST'} ) {
    die "Please set the GIT_HOST env variable";
}

if ( !$ENV{'SSH_AUTH_SOCK'} ) {
    die "Please connect with ssh -A";
}

my $git_host           = $ENV{'GIT_HOST'};
my $cp_whm_git_target  = CPANEL_WHM_URL    =~ s/\{host\}/$git_host/gr;
my $sandbox_git_target = SANDBOX_TOOLS_URL =~ s/\{host\}/$git_host/gr;

update_bashrc();
ensure_skip_parent_check();

system( "yum", "clean", "all" );
system("git archive --format=tar --remote=$cp_whm_git_target $major_version:build-tools bootstrap_sandbox | tar -Opvx > ~/bootstrap_sandbox && chmod +x ~/bootstrap_sandbox && ~/bootstrap_sandbox $major_version && rm ~/bootstrap_sandbox");
system("git archive --format=tar --remote=$sandbox_git_target master:bin deploy_ssh.sh | tar -Opvx > ~/deploy_ssh.sh && chmod +x ~/deploy_ssh.sh && ~/deploy_ssh.sh && rm ~/deploy_ssh.sh");

sub get_file_contents_if_exists {
    my ($file) = @_;
    if ( open( my $fh, '<', $file ) ) {
        local $/;
        return readline($fh);
    }
    return '';
}

sub ensure_skip_parent_check {
    print "Ensuring parent check...\n";
    if ( get_file_contents_if_exists('/var/cpanel/cpanel.config') =~ m{skipparentcheck=1} ) {
        return;
    }
    append_file( '/var/cpanel/cpanel.config', "\nskipparentcheck=1\n" );
    return;
}

sub update_bashrc {
    print "Updating /root/.bashrc...\n";
    if ( get_file_contents_if_exists('/root/.bashrc') =~ m{build-tools} ) {
        return;
    }
    append_file( '/root/.bashrc', qq{\n\nexport PATH="/usr/local/cpanel/3rdparty/bin:/usr/local/cpanel/build-tools:/usr/local/sandbox-utils/bin:/usr/local/cpanel/t/qa/bin:\$PATH"\n\n} );
    chmod( 0700, "/root/.bashrc" );
    return;
}

sub append_file {
    my ( $file, $data ) = @_;
    open( my $fh, '>>', $file ) or die "Failed to open $file: $!";
    print {$fh} $data;
}

sub get_major_version {
    my $cpanel_version = `/usr/local/cpanel/cpanel -V`;
    chomp $cpanel_version;

    my $major_version = int( ( split( m{\s+}, $cpanel_version ) )[0] );

    if ( $major_version % 2 != 0 ) {
        $major_version++;
    }

    return $major_version;
}
